// <auto-generated />
using System;
using EFPayroll;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFPayrollSolution.Migrations
{
    [DbContext(typeof(PayDbContext))]
    partial class PayDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EFPayroll.Payable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Payable");
                });

            modelBuilder.Entity("EFPayroll.Company", b =>
                {
                    b.HasBaseType("EFPayroll.Payable");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("EFPayroll.Contractor", b =>
                {
                    b.HasBaseType("EFPayroll.Payable");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<double>("YtdGrossPay")
                        .HasColumnType("float");

                    b.ToTable("Contractors", (string)null);
                });

            modelBuilder.Entity("EFPayroll.Employee", b =>
                {
                    b.HasBaseType("EFPayroll.Payable");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<double>("YtdGrossPay")
                        .HasColumnType("float");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("EFPayroll.Intern", b =>
                {
                    b.HasBaseType("EFPayroll.Payable");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("YtdGrossPay")
                        .HasColumnType("float");

                    b.ToTable("Interns", (string)null);
                });

            modelBuilder.Entity("EFPayroll.Payable", b =>
                {
                    b.HasOne("EFPayroll.Company", null)
                        .WithMany("Resources")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("EFPayroll.Company", b =>
                {
                    b.HasOne("EFPayroll.Payable", null)
                        .WithOne()
                        .HasForeignKey("EFPayroll.Company", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFPayroll.Contractor", b =>
                {
                    b.HasOne("EFPayroll.Payable", null)
                        .WithOne()
                        .HasForeignKey("EFPayroll.Contractor", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFPayroll.Employee", b =>
                {
                    b.HasOne("EFPayroll.Payable", null)
                        .WithOne()
                        .HasForeignKey("EFPayroll.Employee", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFPayroll.Intern", b =>
                {
                    b.HasOne("EFPayroll.Payable", null)
                        .WithOne()
                        .HasForeignKey("EFPayroll.Intern", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFPayroll.Company", b =>
                {
                    b.Navigation("Resources");
                });
#pragma warning restore 612, 618
        }
    }
}
